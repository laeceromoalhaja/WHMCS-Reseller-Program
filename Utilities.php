<?php
if (!defined("WHMCS")) {
    die("This file cannot be accessed directly");
}

class TieredReseller_Utilities {
    /**
     * Calculate the current tier based on account count
     *
     * @param int $accountCount
     * @param array|null $config Module configuration (optional)
     * @return int Tier level (1-3)
     */
    public function calculateTier($accountCount, $config = null) {
        if ($config === null) {
            $config = $this->getModuleConfig();
        }

        $tier1Limit = (int)$config['tier1_limit'];
        $tier2Limit = (int)$config['tier2_limit'];

        if ($accountCount <= $tier1Limit) {
            return 1;
        } elseif ($accountCount <= $tier2Limit) {
            return 2;
        } else {
            return 3;
        }
    }

    /**
     * Get the module configuration
     *
     * @return array
     */
    public function getModuleConfig() {
        return Capsule::table('tbladdonmodules')
            ->where('module', 'tiered_reseller')
            ->pluck('value', 'setting');
    }

    /**
     * Generate an annual invoice for a reseller
     *
     * @param int $userId
     * @param int $accountCount
     * @param int $tier
     * @return int|false Invoice ID or false on failure
     */
    public function generateResellerInvoice($userId, $accountCount, $tier) {
        try {
            $config = $this->getModuleConfig();
            $pricePerAccount = $this->getTierPrice($tier, $config);
            $totalAmount = $accountCount * $pricePerAccount;

            // Create invoice
            $invoiceData = [
                'userid' => $userId,
                'date' => date('Y-m-d'),
                'duedate' => date('Y-m-d'),
                'paymentmethod' => '',
                'taxrate' => 0,
                'status' => 'Unpaid',
                'notes' => 'Auto-generated by Tiered Reseller Program'
            ];

            // Add invoice items
            $invoiceData['itemdescription1'] = sprintf(
                "%d hosted accounts @ $%.2f each (Tier %d)",
                $accountCount,
                $pricePerAccount,
                $tier
            );
            $invoiceData['itemamount1'] = $totalAmount;
            $invoiceData['itemtaxed1'] = false;

            // Create via WHMCS API
            $invoiceId = localAPI('CreateInvoice', $invoiceData);

            if ($invoiceId['result'] == 'success') {
                // Log the invoice creation
                $this->logAction(
                    $userId,
                    'invoice_created',
                    sprintf(
                        "Generated invoice #%d for %d accounts at Tier %d ($%.2f each)",
                        $invoiceId['invoiceid'],
                        $accountCount,
                        $tier,
                        $pricePerAccount
                    )
                );

                // Update reseller record
                Capsule::table('mod_tiered_reseller')
                    ->where('userid', $userId)
                    ->update([
                        'last_invoice_date' => date('Y-m-d'),
                        'last_invoice_amount' => $totalAmount,
                        'next_due_date' => date('Y-m-d', strtotime('+1 year'))
                    ]);

                // Send notification if enabled
                if ($config['enable_emails'] == 'on') {
                    $this->sendInvoiceNotification($userId, $invoiceId['invoiceid']);
                }

                return $invoiceId['invoiceid'];
            }

            throw new Exception("Invoice creation failed: " . print_r($invoiceId, true));

        } catch (Exception $e) {
            $this->logAction($userId, 'invoice_error', $e->getMessage());
            return false;
        }
    }

    /**
     * Get the price per account for a given tier
     *
     * @param int $tier
     * @param array $config
     * @return float
     */
    public function getTierPrice($tier, $config) {
        switch ($tier) {
            case 1: return (float)$config['tier1_price'];
            case 2: return (float)$config['tier2_price'];
            case 3: return (float)$config['tier3_price'];
            default: return 0;
        }
    }

    /**
     * Send invoice notification email
     *
     * @param int $userId
     * @param int $invoiceId
     * @return bool
     */
    public function sendInvoiceNotification($userId, $invoiceId) {
        try {
            $invoiceLink = rtrim(\WHMCS\Config\Setting::getValue('SystemURL'), '/') . 
                         '/viewinvoice.php?id=' . $invoiceId;

            $message = sprintf(
                "A new invoice has been generated for your reseller account.\n\n" .
                "Invoice ID: %d\n" .
                "View Invoice: %s\n\n" .
                "Thank you for your business!",
                $invoiceId,
                $invoiceLink
            );

            $command = 'SendEmail';
            $values = [
                'messagename' => 'Tiered Reseller Invoice',
                'id' => $userId,
                'customvars' => base64_encode(serialize([
                    'invoice_id' => $invoiceId,
                    'invoice_link' => $invoiceLink
                ]))
            ];

            $results = localAPI($command, $values);
            return $results['result'] == 'success';

        } catch (Exception $e) {
            $this->logAction($userId, 'email_error', $e->getMessage());
            return false;
        }
    }

    /**
     * Handle tier change events
     *
     * @param int $userId
     * @param int $oldTier
     * @param int $newTier
     * @return bool
     */
    public function handleTierChange($userId, $oldTier, $newTier) {
        try {
            // Update database
            Capsule::table('mod_tiered_reseller')
                ->where('userid', $userId)
                ->update(['current_tier' => $newTier]);

            // Log the change
            $this->logAction(
                $userId,
                'tier_change',
                sprintf(
                    "Tier changed from %d to %d",
                    $oldTier,
                    $newTier
                )
            );

            // Send notification if enabled
            $config = $this->getModuleConfig();
            if ($config['enable_emails'] == 'on') {
                $this->sendTierChangeNotification($userId, $oldTier, $newTier);
            }

            return true;

        } catch (Exception $e) {
            $this->logAction($userId, 'tier_change_error', $e->getMessage());
            return false;
        }
    }

    /**
     * Send tier change notification
     *
     * @param int $userId
     * @param int $oldTier
     * @param int $newTier
     * @return bool
     */
    public function sendTierChangeNotification($userId, $oldTier, $newTier) {
        try {
            $config = $this->getModuleConfig();
            $oldPrice = $this->getTierPrice($oldTier, $config);
            $newPrice = $this->getTierPrice($newTier, $config);

            $message = sprintf(
                "Your reseller tier has changed from Tier %d to Tier %d.\n\n" .
                "Old price per account: $%.2f\n" .
                "New price per account: $%.2f\n\n" .
                "This change will take effect on your next billing cycle.",
                $oldTier,
                $newTier,
                $oldPrice,
                $newPrice
            );

            $command = 'SendEmail';
            $values = [
                'messagename' => 'Tiered Reseller Tier Change',
                'id' => $userId,
                'customvars' => base64_encode(serialize([
                    'old_tier' => $oldTier,
                    'new_tier' => $newTier,
                    'old_price' => $oldPrice,
                    'new_price' => $newPrice
                ]))
            ];

            $results = localAPI($command, $values);
            return $results['result'] == 'success';

        } catch (Exception $e) {
            $this->logAction($userId, 'email_error', $e->getMessage());
            return false;
        }
    }

    /**
     * Send renewal reminder
     *
     * @param int $userId
     * @return bool
     */
    public function sendRenewalReminder($userId) {
        try {
            $resellerData = Capsule::table('mod_tiered_reseller')
                ->where('userid', $userId)
                ->first();

            if (!$resellerData) {
                throw new Exception("Reseller not found");
            }

            $config = $this->getModuleConfig();
            $pricePerAccount = $this->getTierPrice($resellerData->current_tier, $config);
            $estimatedTotal = $resellerData->account_count * $pricePerAccount;

            $message = sprintf(
                "Your annual reseller program renewal is coming up in 7 days.\n\n" .
                "Current account count: %d\n" .
                "Current tier: %d ($%.2f per account)\n" .
                "Estimated total: $%.2f\n\n" .
                "Please ensure your payment method is up to date.",
                $resellerData->account_count,
                $resellerData->current_tier,
                $pricePerAccount,
                $estimatedTotal
            );

            $command = 'SendEmail';
            $values = [
                'messagename' => 'Tiered Reseller Renewal Reminder',
                'id' => $userId,
                'customvars' => base64_encode(serialize([
                    'account_count' => $resellerData->account_count,
                    'current_tier' => $resellerData->current_tier,
                    'price_per_account' => $pricePerAccount,
                    'estimated_total' => $estimatedTotal
                ]))
            ];

            $results = localAPI($command, $values);
            return $results['result'] == 'success';

        } catch (Exception $e) {
            $this->logAction($userId, 'email_error', $e->getMessage());
            return false;
        }
    }

    /**
     * Log actions to database
     *
     * @param int|null $userId
     * @param string $action
     * @param string $details
     * @return bool
     */
    public function logAction($userId, $action, $details) {
        try {
            return Capsule::table('mod_tiered_reseller_logs')->insert([
                'userid' => $userId,
                'action' => $action,
                'details' => $details,
                'created_at' => Capsule::raw('NOW()')
            ]);
        } catch (Exception $e) {
            logActivity("[Tiered Reseller] Log Error: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Preview next invoice for a reseller
     *
     * @param int $userId
     * @return array
     */
    public function previewNextInvoice($userId) {
        try {
            $reseller = Capsule::table('mod_tiered_reseller')
                ->where('userid', $userId)
                ->first();

            if (!$reseller) {
                throw new Exception("Reseller not found");
            }

            $config = $this->getModuleConfig();
            $pricePerAccount = $this->getTierPrice($reseller->current_tier, $config);
            $totalAmount = $reseller->account_count * $pricePerAccount;

            return [
                'success' => true,
                'userid' => $userId,
                'account_count' => $reseller->account_count,
                'current_tier' => $reseller->current_tier,
                'price_per_account' => $pricePerAccount,
                'estimated_total' => $totalAmount,
                'next_due_date' => $reseller->next_due_date,
                'description' => sprintf(
                    "%d hosted accounts @ $%.2f each (Tier %d)",
                    $reseller->account_count,
                    $pricePerAccount,
                    $reseller->current_tier
                )
            ];

        } catch (Exception $e) {
            return [
                'success' => false,
                'message' => $e->getMessage()
            ];
        }
    }

    /**
     * Get client summary for admin interface
     *
     * @param int $userId
     * @return array
     */
    public function getClientSummary($userId) {
        try {
            $client = Capsule::table('tblclients')
                ->where('id', $userId)
                ->select(['firstname', 'lastname', 'companyname'])
                ->first();

            $reseller = Capsule::table('mod_tiered_reseller')
                ->where('userid', $userId)
                ->first();

            if (!$client || !$reseller) {
                throw new Exception("Client or reseller data not found");
            }

            return [
                'success' => true,
                'client' => [
                    'name' => trim($client->firstname . ' ' . $client->lastname),
                    'company' => $client->companyname
                ],
                'reseller' => [
                    'account_count' => $reseller->account_count,
                    'current_tier' => $reseller->current_tier,
                    'last_invoice_date' => $reseller->last_invoice_date,
                    'last_invoice_amount' => $reseller->last_invoice_amount,
                    'next_due_date' => $reseller->next_due_date
                ]
            ];

        } catch (Exception $e) {
            return [
                'success' => false,
                'message' => $e->getMessage()
            ];
        }
    }
}
